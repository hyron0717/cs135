;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname int-list) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ())))
;; 2.
;; a. 

;;a list-of-int is one of :
;; empty
;; (cons Int (list-of-int))

;; my-loi-fn: list-of-int -> Any
(define (my-loi-fn loi)
  (cond
    [(empty? loi) ...]
    [else (... (first loi) ...
               (my-loi-fn (rest loi))...)]))

;; Contract:
;; sum-fav: (listof Int) Int -> Int

;; Purpose: find the sum of the elements which greater than or equal to favourite
;; Example:
(check-expect (sum-fav (cons 4 (cons -5 (cons 6 empty))) 4) 10)
(check-expect (sum-fav (cons -7 (cons 8 (cons -9 empty))) 9) 0)

;; Definition:
(define (sum-fav list-of-int favourite)
  (cond 
    [(empty? list-of-int) 0]
    [else 
     (cond
       [(>= (first list-of-int) favourite) 
        (+ (first list-of-int) (sum-fav (rest list-of-int) favourite))]
       [else 
        (sum-fav (rest list-of-int) favourite)])]))

;; Test:
(check-expect (sum-fav (cons 4 (cons 5 (cons 10 empty))) 9) 10)
(check-expect (sum-fav (cons 2 (cons 3 (cons 1 empty))) -1) 6)
(check-expect (sum-fav (cons 15 (cons 2 (cons 3 empty))) 0) 20)
(check-expect (sum-fav empty 2) 0)